{"ast":null,"code":"const STORAGE_KEYS = {\n  EMPLOYEES: 'employees',\n  DEPARTMENTS: 'departments',\n  TRANSFERS: 'transfers',\n  ACCOUNTS: 'accounts'\n};\nconst initialAccounts = [{\n  title: 'Mr',\n  firstName: 'Admin',\n  lastName: 'User',\n  email: 'admin@example.com',\n  role: 'Admin',\n  status: 'Active'\n}, {\n  title: 'Mr',\n  firstName: 'Employee',\n  lastName: 'User',\n  email: 'employee@example.com',\n  role: 'Employee',\n  status: 'Active'\n}];\nconst initialEmployees = [{\n  id: 'EMP001',\n  account: 'admin@example.com',\n  position: 'Developer',\n  department: 'Engineering',\n  hireDate: '2025-01-01',\n  status: 'Active'\n}, {\n  id: 'EMP002',\n  account: 'user@example.com',\n  position: 'Designer',\n  department: 'Marketing',\n  hireDate: '2025-02-01',\n  status: 'Active'\n}];\nconst initialDepartments = [{\n  name: 'Engineering',\n  description: 'Software development team'\n}, {\n  name: 'Marketing',\n  description: 'Marketing and communications team'\n}, {\n  name: 'Human Resources',\n  description: 'HR management and recruitment'\n}];\nexport const storageService = {\n  // Initialize storage with default data if empty\n  initializeStorage: () => {\n    if (!localStorage.getItem(STORAGE_KEYS.EMPLOYEES)) {\n      localStorage.setItem(STORAGE_KEYS.EMPLOYEES, JSON.stringify(initialEmployees));\n    }\n    if (!localStorage.getItem(STORAGE_KEYS.DEPARTMENTS)) {\n      localStorage.setItem(STORAGE_KEYS.DEPARTMENTS, JSON.stringify(initialDepartments));\n    }\n    if (!localStorage.getItem(STORAGE_KEYS.TRANSFERS)) {\n      localStorage.setItem(STORAGE_KEYS.TRANSFERS, JSON.stringify([]));\n    }\n    if (!localStorage.getItem(STORAGE_KEYS.ACCOUNTS)) {\n      localStorage.setItem(STORAGE_KEYS.ACCOUNTS, JSON.stringify(initialAccounts));\n    }\n  },\n  // Employees\n  getEmployees: () => {\n    const data = localStorage.getItem(STORAGE_KEYS.EMPLOYEES);\n    return data ? JSON.parse(data) : [];\n  },\n  setEmployees: employees => {\n    localStorage.setItem(STORAGE_KEYS.EMPLOYEES, JSON.stringify(employees));\n  },\n  // Departments\n  getDepartments: () => {\n    const data = localStorage.getItem(STORAGE_KEYS.DEPARTMENTS);\n    return data ? JSON.parse(data) : [];\n  },\n  setDepartments: departments => {\n    localStorage.setItem(STORAGE_KEYS.DEPARTMENTS, JSON.stringify(departments));\n  },\n  // Accounts\n  getAccounts: () => {\n    const data = localStorage.getItem(STORAGE_KEYS.ACCOUNTS);\n    return data ? JSON.parse(data) : [];\n  },\n  setAccounts: accounts => {\n    localStorage.setItem(STORAGE_KEYS.ACCOUNTS, JSON.stringify(accounts));\n  },\n  // Get available accounts (not already assigned to employees)\n  getAvailableAccounts: () => {\n    const allAccounts = storageService.getAccounts();\n    const employees = storageService.getEmployees();\n    const usedEmails = new Set(employees.map(emp => emp.account));\n    return allAccounts.filter(account => !usedEmails.has(account.email));\n  },\n  // Transfers\n  getTransfers: () => {\n    const data = localStorage.getItem(STORAGE_KEYS.TRANSFERS);\n    return data ? JSON.parse(data) : [];\n  },\n  addTransfer: transfer => {\n    const transfers = storageService.getTransfers();\n    transfers.push(transfer);\n    localStorage.setItem(STORAGE_KEYS.TRANSFERS, JSON.stringify(transfers));\n  },\n  // Department employee count\n  getDepartmentEmployeeCount: departmentName => {\n    const employees = storageService.getEmployees();\n    return employees.filter(emp => emp.department === departmentName).length;\n  },\n  // Get all department counts\n  getAllDepartmentCounts: () => {\n    const employees = storageService.getEmployees();\n    const counts = {};\n    employees.forEach(emp => {\n      counts[emp.department] = (counts[emp.department] || 0) + 1;\n    });\n    return counts;\n  }\n};","map":{"version":3,"names":["STORAGE_KEYS","EMPLOYEES","DEPARTMENTS","TRANSFERS","ACCOUNTS","initialAccounts","title","firstName","lastName","email","role","status","initialEmployees","id","account","position","department","hireDate","initialDepartments","name","description","storageService","initializeStorage","localStorage","getItem","setItem","JSON","stringify","getEmployees","data","parse","setEmployees","employees","getDepartments","setDepartments","departments","getAccounts","setAccounts","accounts","getAvailableAccounts","allAccounts","usedEmails","Set","map","emp","filter","has","getTransfers","addTransfer","transfer","transfers","push","getDepartmentEmployeeCount","departmentName","length","getAllDepartmentCounts","counts","forEach"],"sources":["C:/Users/Administrator/Desktop/IPT-Final-2025/src/services/storageService.ts"],"sourcesContent":["interface Employee {\r\n  id: string;\r\n  account: string;\r\n  position: string;\r\n  department: string;\r\n  hireDate: string;\r\n  status: 'Active' | 'Inactive';\r\n}\r\n\r\ninterface Department {\r\n  name: string;\r\n  description: string;\r\n}\r\n\r\ninterface Account {\r\n  title: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  role: string;\r\n  status: 'Active' | 'Inactive';\r\n}\r\n\r\ninterface TransferRecord {\r\n  employeeId: string;\r\n  fromDepartment: string;\r\n  toDepartment: string;\r\n  date: string;\r\n}\r\n\r\nconst STORAGE_KEYS = {\r\n  EMPLOYEES: 'employees',\r\n  DEPARTMENTS: 'departments',\r\n  TRANSFERS: 'transfers',\r\n  ACCOUNTS: 'accounts'\r\n};\r\n\r\nconst initialAccounts: Account[] = [\r\n  {\r\n    title: 'Mr',\r\n    firstName: 'Admin',\r\n    lastName: 'User',\r\n    email: 'admin@example.com',\r\n    role: 'Admin',\r\n    status: 'Active',\r\n  },\r\n  {\r\n    title: 'Mr',\r\n    firstName: 'Employee',\r\n    lastName: 'User',\r\n    email: 'employee@example.com',\r\n    role: 'Employee',\r\n    status: 'Active',\r\n  }\r\n];\r\n\r\nconst initialEmployees: Employee[] = [\r\n  {\r\n    id: 'EMP001',\r\n    account: 'admin@example.com',\r\n    position: 'Developer',\r\n    department: 'Engineering',\r\n    hireDate: '2025-01-01',\r\n    status: 'Active',\r\n  },\r\n  {\r\n    id: 'EMP002',\r\n    account: 'user@example.com',\r\n    position: 'Designer',\r\n    department: 'Marketing',\r\n    hireDate: '2025-02-01',\r\n    status: 'Active',\r\n  },\r\n];\r\n\r\nconst initialDepartments: Department[] = [\r\n  {\r\n    name: 'Engineering',\r\n    description: 'Software development team',\r\n  },\r\n  {\r\n    name: 'Marketing',\r\n    description: 'Marketing and communications team',\r\n  },\r\n  {\r\n    name: 'Human Resources',\r\n    description: 'HR management and recruitment',\r\n  },\r\n];\r\n\r\nexport const storageService = {\r\n  // Initialize storage with default data if empty\r\n  initializeStorage: () => {\r\n    if (!localStorage.getItem(STORAGE_KEYS.EMPLOYEES)) {\r\n      localStorage.setItem(STORAGE_KEYS.EMPLOYEES, JSON.stringify(initialEmployees));\r\n    }\r\n    if (!localStorage.getItem(STORAGE_KEYS.DEPARTMENTS)) {\r\n      localStorage.setItem(STORAGE_KEYS.DEPARTMENTS, JSON.stringify(initialDepartments));\r\n    }\r\n    if (!localStorage.getItem(STORAGE_KEYS.TRANSFERS)) {\r\n      localStorage.setItem(STORAGE_KEYS.TRANSFERS, JSON.stringify([]));\r\n    }\r\n    if (!localStorage.getItem(STORAGE_KEYS.ACCOUNTS)) {\r\n      localStorage.setItem(STORAGE_KEYS.ACCOUNTS, JSON.stringify(initialAccounts));\r\n    }\r\n  },\r\n\r\n  // Employees\r\n  getEmployees: (): Employee[] => {\r\n    const data = localStorage.getItem(STORAGE_KEYS.EMPLOYEES);\r\n    return data ? JSON.parse(data) : [];\r\n  },\r\n\r\n  setEmployees: (employees: Employee[]) => {\r\n    localStorage.setItem(STORAGE_KEYS.EMPLOYEES, JSON.stringify(employees));\r\n  },\r\n\r\n  // Departments\r\n  getDepartments: (): Department[] => {\r\n    const data = localStorage.getItem(STORAGE_KEYS.DEPARTMENTS);\r\n    return data ? JSON.parse(data) : [];\r\n  },\r\n\r\n  setDepartments: (departments: Department[]) => {\r\n    localStorage.setItem(STORAGE_KEYS.DEPARTMENTS, JSON.stringify(departments));\r\n  },\r\n\r\n  // Accounts\r\n  getAccounts: (): Account[] => {\r\n    const data = localStorage.getItem(STORAGE_KEYS.ACCOUNTS);\r\n    return data ? JSON.parse(data) : [];\r\n  },\r\n\r\n  setAccounts: (accounts: Account[]) => {\r\n    localStorage.setItem(STORAGE_KEYS.ACCOUNTS, JSON.stringify(accounts));\r\n  },\r\n\r\n  // Get available accounts (not already assigned to employees)\r\n  getAvailableAccounts: (): Account[] => {\r\n    const allAccounts = storageService.getAccounts();\r\n    const employees = storageService.getEmployees();\r\n    const usedEmails = new Set(employees.map(emp => emp.account));\r\n    return allAccounts.filter(account => !usedEmails.has(account.email));\r\n  },\r\n\r\n  // Transfers\r\n  getTransfers: (): TransferRecord[] => {\r\n    const data = localStorage.getItem(STORAGE_KEYS.TRANSFERS);\r\n    return data ? JSON.parse(data) : [];\r\n  },\r\n\r\n  addTransfer: (transfer: TransferRecord) => {\r\n    const transfers = storageService.getTransfers();\r\n    transfers.push(transfer);\r\n    localStorage.setItem(STORAGE_KEYS.TRANSFERS, JSON.stringify(transfers));\r\n  },\r\n\r\n  // Department employee count\r\n  getDepartmentEmployeeCount: (departmentName: string): number => {\r\n    const employees = storageService.getEmployees();\r\n    return employees.filter(emp => emp.department === departmentName).length;\r\n  },\r\n\r\n  // Get all department counts\r\n  getAllDepartmentCounts: (): Record<string, number> => {\r\n    const employees = storageService.getEmployees();\r\n    const counts: Record<string, number> = {};\r\n    \r\n    employees.forEach(emp => {\r\n      counts[emp.department] = (counts[emp.department] || 0) + 1;\r\n    });\r\n    \r\n    return counts;\r\n  }\r\n};\r\n\r\nexport type { Employee, Department, TransferRecord, Account }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}