{"ast":null,"code":"const STORAGE_KEYS = {\n  EMPLOYEES: 'employees',\n  DEPARTMENTS: 'departments',\n  TRANSFERS: 'transfers'\n};\nconst initialEmployees = [{\n  id: 'EMP001',\n  account: 'admin@example.com',\n  position: 'Developer',\n  department: 'Engineering',\n  hireDate: '2025-01-01',\n  status: 'Active'\n}, {\n  id: 'EMP002',\n  account: 'user@example.com',\n  position: 'Designer',\n  department: 'Marketing',\n  hireDate: '2025-02-01',\n  status: 'Active'\n}];\nconst initialDepartments = [{\n  name: 'Engineering',\n  description: 'Software development team'\n}, {\n  name: 'Marketing',\n  description: 'Marketing and communications team'\n}, {\n  name: 'Human Resources',\n  description: 'HR management and recruitment'\n}];\nexport const storageService = {\n  // Initialize storage with default data if empty\n  initializeStorage: () => {\n    if (!localStorage.getItem(STORAGE_KEYS.EMPLOYEES)) {\n      localStorage.setItem(STORAGE_KEYS.EMPLOYEES, JSON.stringify(initialEmployees));\n    }\n    if (!localStorage.getItem(STORAGE_KEYS.DEPARTMENTS)) {\n      localStorage.setItem(STORAGE_KEYS.DEPARTMENTS, JSON.stringify(initialDepartments));\n    }\n    if (!localStorage.getItem(STORAGE_KEYS.TRANSFERS)) {\n      localStorage.setItem(STORAGE_KEYS.TRANSFERS, JSON.stringify([]));\n    }\n  },\n  // Employees\n  getEmployees: () => {\n    const data = localStorage.getItem(STORAGE_KEYS.EMPLOYEES);\n    return data ? JSON.parse(data) : [];\n  },\n  setEmployees: employees => {\n    localStorage.setItem(STORAGE_KEYS.EMPLOYEES, JSON.stringify(employees));\n  },\n  // Departments\n  getDepartments: () => {\n    const data = localStorage.getItem(STORAGE_KEYS.DEPARTMENTS);\n    return data ? JSON.parse(data) : [];\n  },\n  setDepartments: departments => {\n    localStorage.setItem(STORAGE_KEYS.DEPARTMENTS, JSON.stringify(departments));\n  },\n  // Transfers\n  getTransfers: () => {\n    const data = localStorage.getItem(STORAGE_KEYS.TRANSFERS);\n    return data ? JSON.parse(data) : [];\n  },\n  addTransfer: transfer => {\n    const transfers = storageService.getTransfers();\n    transfers.push(transfer);\n    localStorage.setItem(STORAGE_KEYS.TRANSFERS, JSON.stringify(transfers));\n  },\n  // Department employee count\n  getDepartmentEmployeeCount: departmentName => {\n    const employees = storageService.getEmployees();\n    return employees.filter(emp => emp.department === departmentName).length;\n  },\n  // Get all department counts\n  getAllDepartmentCounts: () => {\n    const employees = storageService.getEmployees();\n    const counts = {};\n    employees.forEach(emp => {\n      counts[emp.department] = (counts[emp.department] || 0) + 1;\n    });\n    return counts;\n  }\n};","map":{"version":3,"names":["STORAGE_KEYS","EMPLOYEES","DEPARTMENTS","TRANSFERS","initialEmployees","id","account","position","department","hireDate","status","initialDepartments","name","description","storageService","initializeStorage","localStorage","getItem","setItem","JSON","stringify","getEmployees","data","parse","setEmployees","employees","getDepartments","setDepartments","departments","getTransfers","addTransfer","transfer","transfers","push","getDepartmentEmployeeCount","departmentName","filter","emp","length","getAllDepartmentCounts","counts","forEach"],"sources":["C:/Users/Administrator/Desktop/IPT-Final-2025/src/services/storageService.ts"],"sourcesContent":["interface Employee {\r\n  id: string;\r\n  account: string;\r\n  position: string;\r\n  department: string;\r\n  hireDate: string;\r\n  status: 'Active' | 'Inactive';\r\n}\r\n\r\ninterface Department {\r\n  name: string;\r\n  description: string;\r\n}\r\n\r\ninterface TransferRecord {\r\n  employeeId: string;\r\n  fromDepartment: string;\r\n  toDepartment: string;\r\n  date: string;\r\n}\r\n\r\nconst STORAGE_KEYS = {\r\n  EMPLOYEES: 'employees',\r\n  DEPARTMENTS: 'departments',\r\n  TRANSFERS: 'transfers'\r\n};\r\n\r\nconst initialEmployees: Employee[] = [\r\n  {\r\n    id: 'EMP001',\r\n    account: 'admin@example.com',\r\n    position: 'Developer',\r\n    department: 'Engineering',\r\n    hireDate: '2025-01-01',\r\n    status: 'Active',\r\n  },\r\n  {\r\n    id: 'EMP002',\r\n    account: 'user@example.com',\r\n    position: 'Designer',\r\n    department: 'Marketing',\r\n    hireDate: '2025-02-01',\r\n    status: 'Active',\r\n  },\r\n];\r\n\r\nconst initialDepartments: Department[] = [\r\n  {\r\n    name: 'Engineering',\r\n    description: 'Software development team',\r\n  },\r\n  {\r\n    name: 'Marketing',\r\n    description: 'Marketing and communications team',\r\n  },\r\n  {\r\n    name: 'Human Resources',\r\n    description: 'HR management and recruitment',\r\n  },\r\n];\r\n\r\nexport const storageService = {\r\n  // Initialize storage with default data if empty\r\n  initializeStorage: () => {\r\n    if (!localStorage.getItem(STORAGE_KEYS.EMPLOYEES)) {\r\n      localStorage.setItem(STORAGE_KEYS.EMPLOYEES, JSON.stringify(initialEmployees));\r\n    }\r\n    if (!localStorage.getItem(STORAGE_KEYS.DEPARTMENTS)) {\r\n      localStorage.setItem(STORAGE_KEYS.DEPARTMENTS, JSON.stringify(initialDepartments));\r\n    }\r\n    if (!localStorage.getItem(STORAGE_KEYS.TRANSFERS)) {\r\n      localStorage.setItem(STORAGE_KEYS.TRANSFERS, JSON.stringify([]));\r\n    }\r\n  },\r\n\r\n  // Employees\r\n  getEmployees: (): Employee[] => {\r\n    const data = localStorage.getItem(STORAGE_KEYS.EMPLOYEES);\r\n    return data ? JSON.parse(data) : [];\r\n  },\r\n\r\n  setEmployees: (employees: Employee[]) => {\r\n    localStorage.setItem(STORAGE_KEYS.EMPLOYEES, JSON.stringify(employees));\r\n  },\r\n\r\n  // Departments\r\n  getDepartments: (): Department[] => {\r\n    const data = localStorage.getItem(STORAGE_KEYS.DEPARTMENTS);\r\n    return data ? JSON.parse(data) : [];\r\n  },\r\n\r\n  setDepartments: (departments: Department[]) => {\r\n    localStorage.setItem(STORAGE_KEYS.DEPARTMENTS, JSON.stringify(departments));\r\n  },\r\n\r\n  // Transfers\r\n  getTransfers: (): TransferRecord[] => {\r\n    const data = localStorage.getItem(STORAGE_KEYS.TRANSFERS);\r\n    return data ? JSON.parse(data) : [];\r\n  },\r\n\r\n  addTransfer: (transfer: TransferRecord) => {\r\n    const transfers = storageService.getTransfers();\r\n    transfers.push(transfer);\r\n    localStorage.setItem(STORAGE_KEYS.TRANSFERS, JSON.stringify(transfers));\r\n  },\r\n\r\n  // Department employee count\r\n  getDepartmentEmployeeCount: (departmentName: string): number => {\r\n    const employees = storageService.getEmployees();\r\n    return employees.filter(emp => emp.department === departmentName).length;\r\n  },\r\n\r\n  // Get all department counts\r\n  getAllDepartmentCounts: (): Record<string, number> => {\r\n    const employees = storageService.getEmployees();\r\n    const counts: Record<string, number> = {};\r\n    \r\n    employees.forEach(emp => {\r\n      counts[emp.department] = (counts[emp.department] || 0) + 1;\r\n    });\r\n    \r\n    return counts;\r\n  }\r\n};\r\n\r\nexport type { Employee, Department, TransferRecord }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}