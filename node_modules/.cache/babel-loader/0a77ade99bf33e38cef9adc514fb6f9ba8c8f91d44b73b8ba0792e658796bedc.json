{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Calvin_Ken\\\\Desktop\\\\IPT-Final-2025\\\\src\\\\context\\\\DepartmentContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DepartmentContext = /*#__PURE__*/createContext(undefined);\nexport const useDepartments = () => {\n  _s();\n  const context = useContext(DepartmentContext);\n  if (!context) {\n    throw new Error('useDepartments must be used within a DepartmentProvider');\n  }\n  return context;\n};\n_s(useDepartments, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst initialDepartments = [{\n  name: 'Engineering',\n  description: 'Software development team',\n  employeeCount: 1\n}, {\n  name: 'Marketing',\n  description: 'Marketing and communications team',\n  employeeCount: 1\n}, {\n  name: 'Human Resources',\n  description: 'HR management and recruitment',\n  employeeCount: 0\n}];\nexport const DepartmentProvider = ({\n  children\n}) => {\n  _s2();\n  const [departments, setDepartments] = useState(initialDepartments);\n  const updateEmployeeCount = (departmentName, change) => {\n    setDepartments(prevDepartments => prevDepartments.map(dept => dept.name === departmentName ? {\n      ...dept,\n      employeeCount: Math.max(0, dept.employeeCount + change)\n    } : dept));\n  };\n  return /*#__PURE__*/_jsxDEV(DepartmentContext.Provider, {\n    value: {\n      departments,\n      setDepartments,\n      updateEmployeeCount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s2(DepartmentProvider, \"vjIfQksRaxwa8nZ5Q1TYOGeJgIk=\");\n_c = DepartmentProvider;\nexport default DepartmentContext;\nvar _c;\n$RefreshReg$(_c, \"DepartmentProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","DepartmentContext","undefined","useDepartments","_s","context","Error","initialDepartments","name","description","employeeCount","DepartmentProvider","children","_s2","departments","setDepartments","updateEmployeeCount","departmentName","change","prevDepartments","map","dept","Math","max","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Calvin_Ken/Desktop/IPT-Final-2025/src/context/DepartmentContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\ninterface Department {\r\n  name: string;\r\n  description: string;\r\n  employeeCount: number;\r\n}\r\n\r\ninterface DepartmentContextType {\r\n  departments: Department[];\r\n  setDepartments: React.Dispatch<React.SetStateAction<Department[]>>;\r\n  updateEmployeeCount: (departmentName: string, change: number) => void;\r\n}\r\n\r\nconst DepartmentContext = createContext<DepartmentContextType | undefined>(undefined);\r\n\r\nexport const useDepartments = () => {\r\n  const context = useContext(DepartmentContext);\r\n  if (!context) {\r\n    throw new Error('useDepartments must be used within a DepartmentProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nconst initialDepartments: Department[] = [\r\n  {\r\n    name: 'Engineering',\r\n    description: 'Software development team',\r\n    employeeCount: 1,\r\n  },\r\n  {\r\n    name: 'Marketing',\r\n    description: 'Marketing and communications team',\r\n    employeeCount: 1,\r\n  },\r\n  {\r\n    name: 'Human Resources',\r\n    description: 'HR management and recruitment',\r\n    employeeCount: 0,\r\n  },\r\n];\r\n\r\nexport const DepartmentProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [departments, setDepartments] = useState<Department[]>(initialDepartments);\r\n\r\n  const updateEmployeeCount = (departmentName: string, change: number) => {\r\n    setDepartments(prevDepartments =>\r\n      prevDepartments.map(dept =>\r\n        dept.name === departmentName\r\n          ? { ...dept, employeeCount: Math.max(0, dept.employeeCount + change) }\r\n          : dept\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <DepartmentContext.Provider value={{ departments, setDepartments, updateEmployeeCount }}>\r\n      {children}\r\n    </DepartmentContext.Provider>\r\n  );\r\n};\r\n\r\nexport default DepartmentContext; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAc9E,MAAMC,iBAAiB,gBAAGL,aAAa,CAAoCM,SAAS,CAAC;AAErF,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAMC,OAAO,GAAGR,UAAU,CAACI,iBAAiB,CAAC;EAC7C,IAAI,CAACI,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,yDAAyD,CAAC;EAC5E;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,cAAc;AAQ3B,MAAMI,kBAAgC,GAAG,CACvC;EACEC,IAAI,EAAE,aAAa;EACnBC,WAAW,EAAE,2BAA2B;EACxCC,aAAa,EAAE;AACjB,CAAC,EACD;EACEF,IAAI,EAAE,WAAW;EACjBC,WAAW,EAAE,mCAAmC;EAChDC,aAAa,EAAE;AACjB,CAAC,EACD;EACEF,IAAI,EAAE,iBAAiB;EACvBC,WAAW,EAAE,+BAA+B;EAC5CC,aAAa,EAAE;AACjB,CAAC,CACF;AAED,OAAO,MAAMC,kBAA2D,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC3F,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAeS,kBAAkB,CAAC;EAEhF,MAAMS,mBAAmB,GAAGA,CAACC,cAAsB,EAAEC,MAAc,KAAK;IACtEH,cAAc,CAACI,eAAe,IAC5BA,eAAe,CAACC,GAAG,CAACC,IAAI,IACtBA,IAAI,CAACb,IAAI,KAAKS,cAAc,GACxB;MAAE,GAAGI,IAAI;MAAEX,aAAa,EAAEY,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEF,IAAI,CAACX,aAAa,GAAGQ,MAAM;IAAE,CAAC,GACpEG,IACN,CACF,CAAC;EACH,CAAC;EAED,oBACErB,OAAA,CAACC,iBAAiB,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAAEX,WAAW;MAAEC,cAAc;MAAEC;IAAoB,CAAE;IAAAJ,QAAA,EACrFA;EAAQ;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACiB,CAAC;AAEjC,CAAC;AAAChB,GAAA,CAlBWF,kBAA2D;AAAAmB,EAAA,GAA3DnB,kBAA2D;AAoBxE,eAAeV,iBAAiB;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}