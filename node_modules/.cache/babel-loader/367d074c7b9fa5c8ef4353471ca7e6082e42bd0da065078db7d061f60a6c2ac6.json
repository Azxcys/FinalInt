{"ast":null,"code":"const STORAGE_KEYS = {\n  EMPLOYEES: 'employees',\n  DEPARTMENTS: 'departments',\n  TRANSFERS: 'transfers',\n  ACCOUNTS: 'accounts',\n  REQUESTS: 'requests'\n};\nconst initialAccounts = [{\n  title: 'Mr',\n  firstName: 'Admin',\n  lastName: 'User',\n  email: 'admin@example.com',\n  role: 'Admin',\n  status: 'Active'\n}, {\n  title: 'Mr',\n  firstName: 'Employee',\n  lastName: 'User',\n  email: 'employee@example.com',\n  role: 'Employee',\n  status: 'Active'\n}];\nconst initialEmployees = [{\n  id: 'EMP001',\n  account: 'admin@example.com',\n  position: 'Developer',\n  department: 'Engineering',\n  hireDate: '2025-01-01',\n  status: 'Active'\n}, {\n  id: 'EMP002',\n  account: 'user@example.com',\n  position: 'Designer',\n  department: 'Marketing',\n  hireDate: '2025-02-01',\n  status: 'Active'\n}];\nconst initialDepartments = [{\n  name: 'Engineering',\n  description: 'Software development team'\n}, {\n  name: 'Marketing',\n  description: 'Marketing and communications team'\n}, {\n  name: 'Human Resources',\n  description: 'HR management and recruitment'\n}];\nconst initialRequests = [{\n  id: 'REQ001',\n  type: 'Equipment',\n  employeeId: 'EMP002',\n  description: 'Need laptop for development work',\n  requestDate: '2024-03-15',\n  items: [{\n    name: 'Laptop',\n    quantity: 1\n  }],\n  status: 'Pending'\n}, {\n  id: 'REQ002',\n  type: 'Leave',\n  employeeId: 'EMP001',\n  description: 'Annual vacation',\n  requestDate: '2024-03-10',\n  items: [{\n    name: 'Vacation',\n    quantity: 5\n  }],\n  status: 'Approved'\n}];\nexport const storageService = {\n  // Initialize storage with default data if empty\n  initializeStorage: () => {\n    if (!localStorage.getItem(STORAGE_KEYS.EMPLOYEES)) {\n      localStorage.setItem(STORAGE_KEYS.EMPLOYEES, JSON.stringify(initialEmployees));\n    }\n    if (!localStorage.getItem(STORAGE_KEYS.DEPARTMENTS)) {\n      localStorage.setItem(STORAGE_KEYS.DEPARTMENTS, JSON.stringify(initialDepartments));\n    }\n    if (!localStorage.getItem(STORAGE_KEYS.TRANSFERS)) {\n      localStorage.setItem(STORAGE_KEYS.TRANSFERS, JSON.stringify([]));\n    }\n    if (!localStorage.getItem(STORAGE_KEYS.ACCOUNTS)) {\n      localStorage.setItem(STORAGE_KEYS.ACCOUNTS, JSON.stringify(initialAccounts));\n    }\n    if (!localStorage.getItem(STORAGE_KEYS.REQUESTS)) {\n      localStorage.setItem(STORAGE_KEYS.REQUESTS, JSON.stringify(initialRequests));\n    }\n  },\n  // Employees\n  getEmployees: () => {\n    const data = localStorage.getItem(STORAGE_KEYS.EMPLOYEES);\n    return data ? JSON.parse(data) : [];\n  },\n  setEmployees: employees => {\n    localStorage.setItem(STORAGE_KEYS.EMPLOYEES, JSON.stringify(employees));\n  },\n  // Departments\n  getDepartments: () => {\n    const data = localStorage.getItem(STORAGE_KEYS.DEPARTMENTS);\n    return data ? JSON.parse(data) : [];\n  },\n  setDepartments: departments => {\n    localStorage.setItem(STORAGE_KEYS.DEPARTMENTS, JSON.stringify(departments));\n  },\n  // Accounts\n  getAccounts: () => {\n    const data = localStorage.getItem(STORAGE_KEYS.ACCOUNTS);\n    return data ? JSON.parse(data) : [];\n  },\n  setAccounts: accounts => {\n    localStorage.setItem(STORAGE_KEYS.ACCOUNTS, JSON.stringify(accounts));\n  },\n  // Get available accounts (not already assigned to employees)\n  getAvailableAccounts: () => {\n    const allAccounts = storageService.getAccounts();\n    const employees = storageService.getEmployees();\n    const usedEmails = new Set(employees.map(emp => emp.account));\n    return allAccounts.filter(account => !usedEmails.has(account.email));\n  },\n  // Transfers\n  getTransfers: () => {\n    const data = localStorage.getItem(STORAGE_KEYS.TRANSFERS);\n    return data ? JSON.parse(data) : [];\n  },\n  addTransfer: transfer => {\n    const transfers = storageService.getTransfers();\n    transfers.push(transfer);\n    localStorage.setItem(STORAGE_KEYS.TRANSFERS, JSON.stringify(transfers));\n  },\n  // Department employee count\n  getDepartmentEmployeeCount: departmentName => {\n    const employees = storageService.getEmployees();\n    return employees.filter(emp => emp.department === departmentName).length;\n  },\n  // Get all department counts\n  getAllDepartmentCounts: () => {\n    const employees = storageService.getEmployees();\n    const counts = {};\n    employees.forEach(emp => {\n      counts[emp.department] = (counts[emp.department] || 0) + 1;\n    });\n    return counts;\n  },\n  // Requests\n  getRequests: () => {\n    const data = localStorage.getItem(STORAGE_KEYS.REQUESTS);\n    return data ? JSON.parse(data) : [];\n  },\n  setRequests: requests => {\n    localStorage.setItem(STORAGE_KEYS.REQUESTS, JSON.stringify(requests));\n  },\n  addRequest: request => {\n    const requests = storageService.getRequests();\n    requests.push(request);\n    storageService.setRequests(requests);\n  },\n  updateRequest: updatedRequest => {\n    const requests = storageService.getRequests();\n    const index = requests.findIndex(req => req.id === updatedRequest.id);\n    if (index !== -1) {\n      requests[index] = updatedRequest;\n      storageService.setRequests(requests);\n    }\n  },\n  deleteRequest: requestId => {\n    const requests = storageService.getRequests();\n    const filteredRequests = requests.filter(req => req.id !== requestId);\n    storageService.setRequests(filteredRequests);\n  },\n  getNextRequestId: () => {\n    const requests = storageService.getRequests();\n    if (requests.length === 0) return 'REQ001';\n    const lastId = requests[requests.length - 1].id;\n    const numericPart = parseInt(lastId.slice(3));\n    return `REQ${String(numericPart + 1).padStart(3, '0')}`;\n  }\n};","map":{"version":3,"names":["STORAGE_KEYS","EMPLOYEES","DEPARTMENTS","TRANSFERS","ACCOUNTS","REQUESTS","initialAccounts","title","firstName","lastName","email","role","status","initialEmployees","id","account","position","department","hireDate","initialDepartments","name","description","initialRequests","type","employeeId","requestDate","items","quantity","storageService","initializeStorage","localStorage","getItem","setItem","JSON","stringify","getEmployees","data","parse","setEmployees","employees","getDepartments","setDepartments","departments","getAccounts","setAccounts","accounts","getAvailableAccounts","allAccounts","usedEmails","Set","map","emp","filter","has","getTransfers","addTransfer","transfer","transfers","push","getDepartmentEmployeeCount","departmentName","length","getAllDepartmentCounts","counts","forEach","getRequests","setRequests","requests","addRequest","request","updateRequest","updatedRequest","index","findIndex","req","deleteRequest","requestId","filteredRequests","getNextRequestId","lastId","numericPart","parseInt","slice","String","padStart"],"sources":["C:/Users/Calvin_Ken/Desktop/IPT-Final-2025/src/services/storageService.ts"],"sourcesContent":["interface Employee {\n  id: string;\n  account: string;\n  position: string;\n  department: string;\n  hireDate: string;\n  status: 'Active' | 'Inactive';\n}\n\ninterface Department {\n  name: string;\n  description: string;\n}\n\ninterface Account {\n  title: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  role: string;\n  status: 'Active' | 'Inactive';\n}\n\ninterface TransferRecord {\n  employeeId: string;\n  fromDepartment: string;\n  toDepartment: string;\n  date: string;\n}\n\ninterface Request {\n  id: string;\n  type: 'Equipment' | 'Leave';\n  employeeId: string;\n  description: string;\n  requestDate: string;\n  items: {\n    name: string;\n    quantity: number;\n  }[];\n  status: 'Pending' | 'Approved' | 'Disapproved';\n}\n\nconst STORAGE_KEYS = {\n  EMPLOYEES: 'employees',\n  DEPARTMENTS: 'departments',\n  TRANSFERS: 'transfers',\n  ACCOUNTS: 'accounts',\n  REQUESTS: 'requests'\n};\n\nconst initialAccounts: Account[] = [\n  {\n    title: 'Mr',\n    firstName: 'Admin',\n    lastName: 'User',\n    email: 'admin@example.com',\n    role: 'Admin',\n    status: 'Active',\n  },\n  {\n    title: 'Mr',\n    firstName: 'Employee',\n    lastName: 'User',\n    email: 'employee@example.com',\n    role: 'Employee',\n    status: 'Active',\n  }\n];\n\nconst initialEmployees: Employee[] = [\n  {\n    id: 'EMP001',\n    account: 'admin@example.com',\n    position: 'Developer',\n    department: 'Engineering',\n    hireDate: '2025-01-01',\n    status: 'Active',\n  },\n  {\n    id: 'EMP002',\n    account: 'user@example.com',\n    position: 'Designer',\n    department: 'Marketing',\n    hireDate: '2025-02-01',\n    status: 'Active',\n  },\n];\n\nconst initialDepartments: Department[] = [\n  {\n    name: 'Engineering',\n    description: 'Software development team',\n  },\n  {\n    name: 'Marketing',\n    description: 'Marketing and communications team',\n  },\n  {\n    name: 'Human Resources',\n    description: 'HR management and recruitment',\n  },\n];\n\nconst initialRequests: Request[] = [\n  {\n    id: 'REQ001',\n    type: 'Equipment',\n    employeeId: 'EMP002',\n    description: 'Need laptop for development work',\n    requestDate: '2024-03-15',\n    items: [{ name: 'Laptop', quantity: 1 }],\n    status: 'Pending'\n  },\n  {\n    id: 'REQ002',\n    type: 'Leave',\n    employeeId: 'EMP001',\n    description: 'Annual vacation',\n    requestDate: '2024-03-10',\n    items: [{ name: 'Vacation', quantity: 5 }],\n    status: 'Approved'\n  }\n];\n\nexport const storageService = {\n  // Initialize storage with default data if empty\n  initializeStorage: () => {\n    if (!localStorage.getItem(STORAGE_KEYS.EMPLOYEES)) {\n      localStorage.setItem(STORAGE_KEYS.EMPLOYEES, JSON.stringify(initialEmployees));\n    }\n    if (!localStorage.getItem(STORAGE_KEYS.DEPARTMENTS)) {\n      localStorage.setItem(STORAGE_KEYS.DEPARTMENTS, JSON.stringify(initialDepartments));\n    }\n    if (!localStorage.getItem(STORAGE_KEYS.TRANSFERS)) {\n      localStorage.setItem(STORAGE_KEYS.TRANSFERS, JSON.stringify([]));\n    }\n    if (!localStorage.getItem(STORAGE_KEYS.ACCOUNTS)) {\n      localStorage.setItem(STORAGE_KEYS.ACCOUNTS, JSON.stringify(initialAccounts));\n    }\n    if (!localStorage.getItem(STORAGE_KEYS.REQUESTS)) {\n      localStorage.setItem(STORAGE_KEYS.REQUESTS, JSON.stringify(initialRequests));\n    }\n  },\n\n  // Employees\n  getEmployees: (): Employee[] => {\n    const data = localStorage.getItem(STORAGE_KEYS.EMPLOYEES);\n    return data ? JSON.parse(data) : [];\n  },\n\n  setEmployees: (employees: Employee[]) => {\n    localStorage.setItem(STORAGE_KEYS.EMPLOYEES, JSON.stringify(employees));\n  },\n\n  // Departments\n  getDepartments: (): Department[] => {\n    const data = localStorage.getItem(STORAGE_KEYS.DEPARTMENTS);\n    return data ? JSON.parse(data) : [];\n  },\n\n  setDepartments: (departments: Department[]) => {\n    localStorage.setItem(STORAGE_KEYS.DEPARTMENTS, JSON.stringify(departments));\n  },\n\n  // Accounts\n  getAccounts: (): Account[] => {\n    const data = localStorage.getItem(STORAGE_KEYS.ACCOUNTS);\n    return data ? JSON.parse(data) : [];\n  },\n\n  setAccounts: (accounts: Account[]) => {\n    localStorage.setItem(STORAGE_KEYS.ACCOUNTS, JSON.stringify(accounts));\n  },\n\n  // Get available accounts (not already assigned to employees)\n  getAvailableAccounts: (): Account[] => {\n    const allAccounts = storageService.getAccounts();\n    const employees = storageService.getEmployees();\n    const usedEmails = new Set(employees.map(emp => emp.account));\n    return allAccounts.filter(account => !usedEmails.has(account.email));\n  },\n\n  // Transfers\n  getTransfers: (): TransferRecord[] => {\n    const data = localStorage.getItem(STORAGE_KEYS.TRANSFERS);\n    return data ? JSON.parse(data) : [];\n  },\n\n  addTransfer: (transfer: TransferRecord) => {\n    const transfers = storageService.getTransfers();\n    transfers.push(transfer);\n    localStorage.setItem(STORAGE_KEYS.TRANSFERS, JSON.stringify(transfers));\n  },\n\n  // Department employee count\n  getDepartmentEmployeeCount: (departmentName: string): number => {\n    const employees = storageService.getEmployees();\n    return employees.filter(emp => emp.department === departmentName).length;\n  },\n\n  // Get all department counts\n  getAllDepartmentCounts: (): Record<string, number> => {\n    const employees = storageService.getEmployees();\n    const counts: Record<string, number> = {};\n    \n    employees.forEach(emp => {\n      counts[emp.department] = (counts[emp.department] || 0) + 1;\n    });\n    \n    return counts;\n  },\n\n  // Requests\n  getRequests: (): Request[] => {\n    const data = localStorage.getItem(STORAGE_KEYS.REQUESTS);\n    return data ? JSON.parse(data) : [];\n  },\n\n  setRequests: (requests: Request[]) => {\n    localStorage.setItem(STORAGE_KEYS.REQUESTS, JSON.stringify(requests));\n  },\n\n  addRequest: (request: Request) => {\n    const requests = storageService.getRequests();\n    requests.push(request);\n    storageService.setRequests(requests);\n  },\n\n  updateRequest: (updatedRequest: Request) => {\n    const requests = storageService.getRequests();\n    const index = requests.findIndex(req => req.id === updatedRequest.id);\n    if (index !== -1) {\n      requests[index] = updatedRequest;\n      storageService.setRequests(requests);\n    }\n  },\n\n  deleteRequest: (requestId: string) => {\n    const requests = storageService.getRequests();\n    const filteredRequests = requests.filter(req => req.id !== requestId);\n    storageService.setRequests(filteredRequests);\n  },\n\n  getNextRequestId: (): string => {\n    const requests = storageService.getRequests();\n    if (requests.length === 0) return 'REQ001';\n    const lastId = requests[requests.length - 1].id;\n    const numericPart = parseInt(lastId.slice(3));\n    return `REQ${String(numericPart + 1).padStart(3, '0')}`;\n  }\n};\n\nexport type { Employee, Department, TransferRecord, Account, Request }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}